server:
  port: 9090
  timezone: Asia/Seoul

  servlet:
    session:
      cookie:
        same-site: lax  # SameSite 설정
        secure: false  # 로컬 환경에서는 false로 설정
        http-only: true
    timeout: 30m

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/petscare?useSSL=false&serverTimezone=Asia/Seoul
    username: root
    password: blackrose12
    driver-class-name: com.mysql.cj.jdbc.Driver

  # Page Reload
  thymeleaf:
    prefix: "classpath:/templates/"
    suffix: ".html"
    cache: true

  logging:
    level:
      com:
        PetSitter: DEBUG  # 해당 패키지 내에서 모든 로그가 DEBUG 레벨로 출력됩니다.
      org:
        springframework:
          web: DEBUG  # Spring 웹 관련 로그도 DEBUG 레벨로 출력됩니다.
    pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"  # 로그 출력 형식 설정
  output:
    ansi:
      enabled: always

  servlet:
    multipart:
      enabled: true # 멀티파트 파일 업로드 허용
      max-file-size: 10MB # 업로드 가능한 최대 파일 크기
      max-request-size: 20MB # 요청 크기 제한

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        default_batch_fetch_size: 100 # @BatchSize = 100 한 방에 100개 쫙 뽑아옴. 원래라면 whwer 1:N 관계의 컬렉션 id = ? 이랬을텐데 IN으로 100개 땡김
    #    show_sql: true # System.out으로 뿌림
    open-in-view: false # OSIV(Open Session In View)를 끄면 모든 지연로딩을 트랜잭션 안에서 처리해아 한다(한 트랜잭션까지만 디비 커넥터를 들고 있다가 끝나면 커넥터 끊고, 영속성 끝내버려서(준영속)), 뷰 템플릿에서 지연로딩 작동 X
  mvc:
    hidden method:
      filter:
        enabled: true

  jackson:
    time-zone: Asia/Seoul

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            redirect-uri: "http://ec2-3-36-128-60.ap-northeast-2.compute.amazonaws.com:9090/login/oauth2/code/google"
            scope:
              - profile
              - email
            issuer: "https://accounts.google.com"  # 구글 발급자 설정
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            redirect-uri: "http://ec2-3-36-128-60.ap-northeast-2.compute.amazonaws.com:9090/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            scope: profile_nickname, account_email
            client-name: Kakao
            provider: kakao
            issuer: "https://kauth.kakao.com"  # 카카오 발급자 설정
          naver:
            client-id: ${NAVER_OAUTH_CLIENT_ID}
            client-secret: ${NAVER_OAUTH_CLIENT_SECRET}
            redirect-uri: "http://ec2-3-36-128-60.ap-northeast-2.compute.amazonaws.com:9090/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            scope: name, email, mobile
            client-name: Naver
            provider: naver
            issuer: "https://nid.naver.com"  # 네이버 발급자 설정
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # EC2에 설치한 일반 Redis 서버
  # 포트: 6379
  # 통신: 암호화되지 않은 평문(Plaintext) 통신
  # TLS 설정: 직접 stunnel, redis-server.conf 등의 추가 설정 없이는 비활성화 상태
  # 즉, ssl: true를 설정하면 Spring (또는 Lettuce 클라이언트)은 TLS 핸드셰이크를 시도하게 되는데, Redis 서버는 TLS를 아예 지원하지 않기 때문에 프로토콜 충돌로 다음과 같은 오류가 발생.
  # Redis 6 이상에서는 redis.conf에 TLS 관련 설정 (tls-port, tls-cert-file, tls-key-file, 등) 명시
  # 일반 redis-cli 와 같이 평문으로 접속이 되면 TLS(SSL) 사용하지 않은 경우.
  redis:
    host: ec2-3-36-128-60.ap-northeast-2.compute.amazonaws.com
    port: 6379
    password: blackrose12
    ssl: false

logging.level:
  org.hibernate.SQL: debug  # 하이버네이트가 생성하는(SQL, JPA) 동작들이 로그로 찍혀서 모두 보임.
  org.hibernate.orm.jdbc.bind: debug

# swagger api
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
  paths-to-match: /api/**

profileUpload:
  path: /home/ubuntu/petscare/uploads/profile/

petsUpload:
  path: /home/ubuntu/petscare/uploads/pets/

carelogsUpload:
  path: /home/ubuntu/petscare/uploads/carelogs/